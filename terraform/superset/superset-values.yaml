# Disable the chart's default initContainers.
init:
  enabled: false

# We need to define our own init containers for the main Superset pod.
superset:
  initContainers:
    - name: wait-for-cloudsql-and-db
      image: alpine/curl:3.14
      command:
        - sh
        - -c
        - |
          # The Cloud SQL Proxy must run as a long-running process
          # Here we launch it as a background job within the init container.
          /cloud-sql-proxy --port=5432 "$(CLOUD_SQL_INSTANCE_CONNECTION_NAME)" &

          echo "Waiting for Cloud SQL Proxy to be up on localhost:5432..."
          while ! nc -z -w 1 localhost 5432; do
            sleep 1
          done
          echo "Cloud SQL Proxy is up. Now waiting for PostgreSQL database..."
          while ! nc -z -w 1 127.0.0.1 5432; do
            sleep 1
          done
          echo "Database is ready. Exiting init container."
      env:
        - name: CLOUD_SQL_INSTANCE_CONNECTION_NAME
          value: "{{ .Values.connectionName }}"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532

# We also need to define a custom init container for the worker pod.
supersetWorker:
  initContainers:
    - name: wait-for-cloudsql-and-db-and-redis
      image: alpine/curl:3.14
      command:
        - sh
        - -c
        - |
          # The Cloud SQL Proxy must run as a long-running process
          /cloud-sql-proxy --port=5432 "$(CLOUD_SQL_INSTANCE_CONNECTION_NAME)" &

          echo "Waiting for Cloud SQL Proxy to be up on localhost:5432..."
          while ! nc -z -w 1 localhost 5432; do
            sleep 1
          done
          echo "Cloud SQL Proxy is up. Now waiting for PostgreSQL database..."
          while ! nc -z -w 1 127.0.0.1 5432; do
            sleep 1
          done

          echo "Database is ready. Waiting for Redis..."
          while ! nc -z -w 1 superset-redis-master 6379; do
            sleep 1
          done
          echo "Redis is ready. Exiting init container."
      env:
        - name: CLOUD_SQL_INSTANCE_CONNECTION_NAME
          value: "{{ .Values.connectionName }}"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532


# The rest of your configuration remains the same
extraVolumes:
  - name: requirements
    configMap:
      name: superset-requirements

extraVolumeMounts:
  - name: requirements
    mountPath: /app/requirements
    readOnly: true

bootstrapScript: |
  #!/bin/bash
  
  # Install system-level dependencies
  apt-get update && apt-get install -y \
    python3-dev \
    default-libmysqlclient-dev \
    build-essential \
    pkg-config

  # Install required Python packages
  uv pip install \
    authlib \
    psycopg2-binary \
    google-cloud-bigquery \

  # Create bootstrap file if it doesn't exist
  if [ ! -f ~/bootstrap ]; then
    echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap
  fi

# We don't need an extra container anymore, as the init container handles this.
extraContainers: []

extraEnv:
  - name: SUPERSET_LOAD_EXAMPLES
    value: "no"